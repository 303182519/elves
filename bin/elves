#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
    , path = require('path')
    , fs = require('fs')
    , cwd = process.cwd()
    , elves = require("..")
    , chalk = require("chalk");

// options
program
    .version(JSON.parse(fs.readFileSync(path.join(cwd, 'package.json'), 'utf8')).version)
    .usage('[options]' +
        '\n' +
        '         elves [options] <config>' +
        '\n' +
        '         elves [options] <caseUrl>' +
        '\n' +
        '         elves [options] <caseUrl> <pageUrl>')
    .option('-r, --remoteServer', "take test on remote server")
    .option('-c, --configFile <file>', "config file path. defaults to test/config.json")
    .parse(process.argv);

program.configFile = program.configFile || "test/config.json";
program.localServer = program.localServer || "http://localhost:3000";

var config = [];

//server start
switch(program.args.length) {
    case 0:
        //search test/config.json
        if(config = configHandler()) {
            break;
        } else {
            console.log(chalk.cyan("[elves log]  ") + "Can not find config.json");
        }
        //search test/index.js
        if(config = caseHandler("/test/index.js")) {
            config = [config];
            break;
        }
        break;
    case 1:
    case 2:
        if(config = caseHandler(program.args[0], program.args[1])) {
            config = [config];
            break;
        }
        break;
}

if( !config || !config.length > 0 ) {
    console.log(chalk.cyan("[elves log]  ") + "There is no case to run!");
    process.exit(1);
}

elves.install();

elves.run(config);

//=== util ===

function configHandler(configPath) {
    configPath = configPath || path.join(cwd, program.configFile);

    var config;

    if(fs.existsSync(configPath)) {
        config = JSON.parse(fs.readFileSync(configPath, "utf8"));

        config.forEach(function(item, i) {
            config[i] = caseHandler(item.caseUrl, item.pageUrl);
        });

        config = config.filter(function(item) {
            return item != null;
        });

        return config;
    }
    return null;
}

function caseHandler(caseUrl, pageUrl) {
    caseUrl = path.join(cwd, caseUrl);
    if(!program.remoteServer) {
        if(pageUrl) {
            pageUrl = path.join(program.localServer,pageUrl);
        } else {
            pageUrl = "";
        }
    }
    if(fs.existsSync(caseUrl) && fs.lstatSync(caseUrl).isFile()) {
        return {
            pageUrl: pageUrl,
            caseUrl: caseUrl
        };
    }
    console.log(chalk.cyan("[elves log]  ") + caseUrl + " is not exist or not a file!");
    return null;
}
